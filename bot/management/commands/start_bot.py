import random

from asgiref.sync import sync_to_async
from django.db import transaction
from django.utils import timezone
from django.core.management.base import BaseCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
import requests
from urllib.parse import quote

from bot.models import Words

TESTING, ANSWER = range(2)

class Command(BaseCommand):
    help = 'Telegram translation bot'

    async def start(self, update, context):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
            "/lang - –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞"
        )

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏\n"
            "/add - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n"
            "/list - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n"
        )

    @sync_to_async
    def _add_word_to_db(self, user_id, word, translation):
        with transaction.atomic():
            Words.objects.create(
                user_id=user_id,
                word=word,
                translate=translation,
                created_at=timezone.now()
            )

    async def add_word(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        text = ''.join(context.args) if context else None

        if not text:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ /add")
            return

        try:
            translated = self.translate_text(text)

            await self._add_word_to_db(user_id, text, translated)
            await update.message.reply_text((f"‚úÖ –°–ª–æ–≤–æ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å"))

        except Exception as e:

            await update.message.reply_text((f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"))

    @sync_to_async
    def _get_user_words(self, user_id):
        return list(Words.objects.filter(user_id=user_id).order_by('-created_at').values('word', 'translate'))
    async def get_list_word(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        words = await self._get_user_words(user_id)

        if not words:
            await update.message.reply_text(f'–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç')

        message = 'üìö –í–∞—à —Å–ª–æ–≤–∞—Ä—å:\n\n'

        for word in words:

            message += f"‚Ä¢ {word['word']} - {word['translate']}\n"

        await update.message.reply_text(message)

    @sync_to_async
    def _get_random_word(self, user_id):
        words = list(Words.objects.filter(user_id=user_id))
        return random.choice(words) if words else None



    async def start_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        word = await self._get_random_word(user_id)

        if not word:
            await update.message.reply_text(f'–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç')

        context.user_data['current_word'] = word
        context.user_data['correct_answers'] = 0
        context.user_data['total_questions'] = 0

        reply_keyboard = [['–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç', '–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç']]

        await update.message.reply_text(
            f'–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ {word.word}?',
            reply_markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))

        return ANSWER

    async def check_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        user_answer = update.message.text.lower()
        word = context.user_data['current_word']
        correct_translation = word.translate.lower()

        if user_answer == "–ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç":
            await update.message.reply_text(
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:{word.translate}",
                reply_markup = ReplyKeyboardRemove()
            )
        elif user_answer == "–∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç":
            return await self.finish_test(update, context)
        elif user_answer == correct_translation:
            context.user_data['correct_answers'] += 1
            await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {word.translate}")

        context.user_data['total_questions'] += 1

        return await self.next_question(update, context)

    async def next_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        user_id = update.message.from_user.id
        word = await self._get_random_word(user_id)

        if not word:
            await update.message.reply_text('–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!')
            return await self.finish_test(update,context)

        context.user_data['current_word'] = word
        reply_keyboard = [['–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç', '–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç']]

        await update.message.reply_text(
            f'–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ {word.word}?',
            reply_markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
        return ANSWER

    async def finish_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        correct = context.user_data.get('correct_answers', 0)
        total = context.user_data.get('total_questions', 0)

        score = (correct / total * 100) if total > 0 else 0

        await update.message.reply_text(
            f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} –∏–∑ {total}\n"
            f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {score:.1f}%",
            reply_markup=ReplyKeyboardRemove()
        )

        context.user_data.pop('current_word', None)
        context.user_data.pop('correct_answers', None)
        context.user_data.pop('total_questions', None)

        return ConversationHandler.END

    def translate_text(self, text, target='ru'):
        try:
            url = "https://libretranslate.de/translate"
            data = {
                "q": text,
                "source": "auto",
                "target": target
            }
            response = requests.post(url, json=data, timeout=5)
            response.raise_for_status()
            return response.json()["translatedText"]

        except Exception as e:

            try:
                url = f"https://api.mymemory.translated.net/get?q={quote(text)}&langpair=ZH|{target}"
                response = requests.get(url, timeout=5)
                data = response.json()
                return data["responseData"]["translatedText"]
            except:
                raise Exception("–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    async def handle_message(self, update, context):
        text = update.message.text.strip()

        if not text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            return

        try:
            translated = self.translate_text(text)
            await update.message.reply_text(f"üîπ –ü–µ—Ä–µ–≤–æ–¥:\n{translated}")
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    async def cancel_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        await update.message.reply_text(
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove()
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
        context.user_data.pop('current_word', None)
        context.user_data.pop('correct_answers', None)
        context.user_data.pop('total_questions', None)

        return ConversationHandler.END

    def handle(self, *args, **options):
        app = Application.builder().token('7895528124:AAHedbHd2-adhm0c1Vr5v6Cisvl3v5Unu28').build()

        # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", self.start))
        app.add_handler(CommandHandler("help", self.help))
        app.add_handler(CommandHandler("add", self.add_word))
        app.add_handler(CommandHandler("list", self.get_list_word))


        test_handler = ConversationHandler(
            entry_points=[CommandHandler("test", self.start_test)],
            states={
                ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.check_answer)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel_test)],
        )
        app.add_handler(test_handler)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
        app.run_polling()