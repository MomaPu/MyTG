from asgiref.sync import sync_to_async
from django.db import transaction
from django.utils import timezone
from django.core.management.base import BaseCommand
from dotenv import load_dotenv
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
import requests
from urllib.parse import quote
from bot.models import Words
from bot.services.translation_services import TranslationService
from bot.services.word_service import WordService


class StartHandler:
	async def handle(self, update, context):
		await update.message.reply_text(
			"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.\n\n"
			"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
			"/help - —Å–ø—Ä–∞–≤–∫–∞\n"
			"/lang - –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞"
		)


class HelpHandler:
	async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		await update.message.reply_text(
			"–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏\n"
			"/add - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n"
			"/list - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n"
			"/test - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∏–∑—É—á–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞–º"
		)


class AddWordHandler:

	@sync_to_async
	def __init__(self, word_service:WordService,translation_service:TranslationService):
			self.word_service = word_service
			self.translation_service = translation_service

	async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		user_id = update.message.from_user.id
		text = ''.join(context.args) if context else None

		if not text:
			await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ /add")
			return

		try:
			translated = self.translate_text(text)

			await self._add_word_to_db(user_id, text, translated)
			await update.message.reply_text((f"‚úÖ –°–ª–æ–≤–æ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å"))

		except Exception as e:

			await update.message.reply_text((f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"))

class ListWordsHandler:

	def __init__(self, word_service: WordService):
		self.word_service = word_service

	async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		user_id = update.message.from_user.id
		words = self.word_service.get_user_words(user_id)

		if not words:
			await update.message.reply_text('–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç')
			return

		message = 'üìö –í–∞—à —Å–ª–æ–≤–∞—Ä—å:\n\n'
		for word in words:
			message += f"‚Ä¢ {word['word']} - {word['translate']}\n"

		await update.message.reply_text(message)

class TestHandler:

	def __init__(self, word_service=WordService):
		self.word_service=WordService
		self.ANSWER = 2

	async def start_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		user_id = update.message.from_user.id
		word = self.word_service.get_random_word(user_id)

		if not word:
			await update.message.reply_text('–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç')
			return ConversationHandler.END

		context.user_data['current_word'] = word
		context.user_data['correct_answers'] = 0
		context.user_data['total_questions'] = 0

		reply_keyboard = [['–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç', '–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç']]

		await update.message.reply_text(
			f'–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ {word.word}?',
			reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))

		return self.ANSWER

	async def check_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		user_answer = update.message.text.lower()
		word = context.user_data['current_word']
		correct_translation = word.translate.lower()

		if user_answer == "–ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç":
			await update.message.reply_text(
				f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {word.translate}",
				reply_markup=ReplyKeyboardRemove()
			)
		elif user_answer == "–∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç":
			return await self.finish_test(update, context)
		elif user_answer == correct_translation:
			context.user_data['correct_answers'] += 1
			await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
		else:
			await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {word.translate}")

		context.user_data['total_questions'] += 1
		return await self.next_question(update, context)

	async def next_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		user_id = update.message.from_user.id
		word = self.word_service.get_random_word(user_id)

		if not word:
			await update.message.reply_text('–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!')
			return await self.finish_test(update, context)

		context.user_data['current_word'] = word
		reply_keyboard = [['–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç', '–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç']]

		await update.message.reply_text(
			f'–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ {word.word}?',
			reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
		return self.ANSWER

	async def finish_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		correct = context.user_data.get('correct_answers', 0)
		total = context.user_data.get('total_questions', 0)
		score = (correct / total * 100) if total > 0 else 0

		await update.message.reply_text(
			f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
			f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} –∏–∑ {total}\n"
			f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {score:.1f}%",
			reply_markup=ReplyKeyboardRemove()
		)

		context.user_data.clear()
		return ConversationHandler.END

	async def cancel_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		await update.message.reply_text(
			"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
			reply_markup=ReplyKeyboardRemove()
		)
		context.user_data.clear()
		return ConversationHandler.END

	def create_conversation_handler(self):
		return ConversationHandler(
			entry_points=[CommandHandler("test", self.start_test)],
			states={
				self.ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.check_answer)],
			},
			fallbacks=[CommandHandler("cancel", self.cancel_test)],
		)
